package org.java8;

import com.sun.java.accessibility.util.AWTEventMonitor;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class java_8_streams {
    static List<Employee> employeeList = new ArrayList<Employee>();

    public static void main(String[] args) {

        employeeList=loadEmployees();





        // Query 1 : How many male and female employees are there in the organization?
        List<Employee> ex1 = employeeList;
        Map<String,Long>data1 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()));
        System.out.println(data1);

        //"Query 2 : Print the name of all departments in the organization?
        List<Employee> ex2 = employeeList;
        List<String> data2 = employeeList.stream().map(Employee::getDepartment).collect(Collectors.toList());
        System.out.println(data2);

        //Query 3 : What is the average age of male and female employees?
        List<Employee> ex3 = employeeList;
         Map<String, Double> data3 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingDouble(Employee::getAge)));
         System.out.println(data3);

        //Query 4 : Get the details of highest paid employee in the organization?
        List<Employee> ex4 = employeeList;
         Employee data4 = ex4.stream().max(Comparator.comparing(Employee::getSalary)).get();
        Employee data4_1 =employeeList.stream().sorted(Comparator.comparingDouble(Employee::getSalary).reversed()).findFirst().get();
        System.out.println(data4);
        System.out.println(data4_1);

        //Query 5 : Get the names of all employees who have joined after 2015?
        List<Employee> ex5 = employeeList;
        List<String> data5 = ex5.stream().filter(x->x.getYearOfJoining()>2015).map(x->x.getName()).collect(Collectors.toList());
        System.out.println(data5);

        //Query 6 : Count the number of employees in each department?
        List<Employee> ex6 = employeeList;
         Map<String, Long> data6 = ex6.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()));
        //System.out.println(data6);

        //Query 7 : What is the average salary of each department?
        List<Employee> ex7 = employeeList;
         Map<String, Double> data7 =ex7.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.averagingDouble(Employee::getSalary)));
        //System.out.println(data7);

        //Query 8 : Get the details of youngest male employee in the product development department?
        List<Employee> ex8 = employeeList;
        Employee data8 = ex8.stream().filter(x->x.getGender()=="Male" & x.getDepartment()=="Product Development").min(Comparator.comparingDouble(Employee::getAge)).get();
        //System.out.println(data8);

        //Query 9 : Who has the most working experience in the organization?
        List<Employee> ex9 = employeeList;
        Employee data9 = ex9.stream().sorted(Comparator.comparingInt(Employee::getYearOfJoining)).findFirst().get();
        //System.out.println(data9);

        //Query 10 : How many male and female employees are there in the sales and marketing team?
        List<Employee> ex10 = employeeList;
         Map<String, Long> data10 = ex10.stream().filter(x->x.getDepartment() =="Sales And Marketing").collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()));
        //System.out.println(data10);

        //Query 11 : What is the average salary of male and female employees?
        List<Employee> ex11 = employeeList;
         Map<String,  Double> data11 = ex11.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary)));
        System.out.println(data11);

        //Query 12 : List down the names of all employees in each department?
        List<Employee> ex12 = employeeList;
        Map<String, List<String>> data12 = ex12.stream()
                .collect(Collectors.groupingBy(Employee::getDepartment,Collectors.mapping(Employee::getName,Collectors.toList())));
        //System.out.println(data12);

       // Query 13 : What is the average salary and total salary of the whole organization?
        List<Employee> ex13 = employeeList;
        DoubleSummaryStatistics data13 = ex13.stream().collect(Collectors.summarizingDouble(Employee::getSalary));
        data13.getAverage();

        //Query 14 : Separate the employees who are younger or equal to 25 years from those employees who are older than 25 years.
        List<Employee> ex14 = employeeList;
         Map< Boolean, List<Employee>> data14 = ex14.stream().collect(Collectors.partitioningBy(x->x.getAge()>25));
        //System.out.println(data14);

        //Query 15 : Who is the oldest employee in the organization? What is his age and which department he belongs to?
        List<Employee> ex15 = employeeList;
        Employee data15 = ex15.stream().max(Comparator.comparingInt(Employee::getAge)).get();
        //System.out.println(data15);

        //Query 12 : List down the names and age of all employees in each department?
        Map<String, List<String>> data16 = ex13.stream()
                .collect(Collectors.groupingBy(Employee::getDepartment,
                        Collectors.mapping(x->x.getName()+"("+x.getAge()+")",Collectors.toList())));
        Map<String, List<Employee.EmployeeInfo>> data17 = ex15.stream()
                .collect(Collectors.groupingBy(Employee::getDepartment,
                        Collectors.mapping(x -> new Employee.EmployeeInfo(x.name,x.getAge()), Collectors.toList())));
        System.out.println(data16);
        System.out.println(data17);

        //Query 16 : List down the names group by employees into 3 groups  below ->15K below ->30k  above 30

        Map<String,List<String>> data18 = employeeList.stream().collect(Collectors.groupingBy(sal -> {
            if (sal.getSalary() < 15000) return "Small";
            else if (sal.getSalary() > 15000 & sal.getSalary() < 30000) return "Medium";
            else return "Huge";
        }, Collectors.mapping(x -> x.getName()+"("+x.getSalary()+")", Collectors.toList())));
        System.out.println(data18);

        //19. For each department, find the youngest employee, but instead of returning the employee object, return only their name in uppercase.
         Map<String, String> ex19 = employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,
                Collectors.collectingAndThen(Collectors.minBy(Comparator.comparingDouble(Employee::getAge)),
                        x -> x.get().getName())));

        System.out.println(ex19);

        //20. Group employees by department, then within each department find the oldest employee
        Map<String, Optional<Employee>> ex20 = employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,
                Collectors.maxBy(Comparator.comparingInt(Employee::getAge))));

        System.out.println(ex20);

        //21. sort employees by age if age is same sort by name
         List<Employee> ex21 = employeeList.stream().sorted(Comparator.comparingInt(Employee::getAge).thenComparing(Employee::getName)).collect(Collectors.toList());
        System.out.println(ex21);

        //22. sort employees by age if age is same sort by name in each department
         Map<String, List<Employee>> ex22 = employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.collectingAndThen(Collectors.toList(), x -> x.stream()
                .sorted(Comparator.comparingInt(Employee::getAge).thenComparing(Employee::getName)).collect(Collectors.toList()))));
        System.out.println(ex22);

        //23. Fifth highest salary
        Optional<Employee> ex23 = employeeList.stream().sorted(Comparator.comparingDouble(Employee::getSalary).reversed()).skip(4).limit(10).findFirst();
        System.out.println(ex23);

              //Imagine you have a list of Employee objects, each with attributes such as name,
        // department, salary, and joiningDate. Using Java Stream API, design a pipeline
        // to find the average salary of the employees who joined the company before
        // the year 2010, grouped by department. Additionally, consider only those
        // departments where the average salary is above a certain threshold,
        // let's say $60,000. Ensure that the final result is presented in a
        // concise and readable manner.

        employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.averagingDouble(Employee::getSalary)))
                .entrySet().stream().filter(x->x.getValue()>10000).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));










    }

    private static List<Employee> loadEmployees() {
        employeeList.add(new Employee(111, "Jiya Brein", 32, "Female", "HR", 2011, 25000.0));
        employeeList.add(new Employee(122, "Paul Niksui", 25, "Male", "Sales And Marketing", 2015, 13500.0));
        employeeList.add(new Employee(133, "Martin Theron", 29, "Male", "Infrastructure", 2012, 18000.0));
        employeeList.add(new Employee(144, "Murali Gowda", 28, "Male", "Product Development", 2014, 32500.0));
        employeeList.add(new Employee(155, "Nima Roy", 27, "Female", "HR", 2013, 22700.0));
        employeeList.add(new Employee(166, "Iqbal Hussain", 43, "Male", "Security And Transport", 2016, 10500.0));
        employeeList.add(new Employee(177, "Manu Sharma", 35, "Male", "Account And Finance", 2010, 27000.0));
        employeeList.add(new Employee(188, "Wang Liu", 31, "Male", "Product Development", 2015, 34500.0));
        employeeList.add(new Employee(199, "Amelia Zoe", 24, "Female", "Sales And Marketing", 2016, 11500.0));
        employeeList.add(new Employee(200, "Jaden Dough", 38, "Male", "Security And Transport", 2015, 11000.5));
        employeeList.add(new Employee(211, "Jasna Kaur", 27, "Female", "Infrastructure", 2014, 15700.0));
        employeeList.add(new Employee(222, "Nitin Joshi", 25, "Male", "Product Development", 2016, 28200.0));
        employeeList.add(new Employee(233, "Jyothi Reddy", 27, "Female", "Account And Finance", 2013, 21300.0));
        employeeList.add(new Employee(244, "Nicolus Den", 24, "Male", "Sales And Marketing", 2017, 10700.5));
        employeeList.add(new Employee(255, "Ali Baig", 23, "Male", "Infrastructure", 2018, 12700.0));
        employeeList.add(new Employee(266, "Sanvi Pandey", 26, "Female", "Product Development", 2015, 28900.0));
        employeeList.add(new Employee(277, "Anuj Chettiar", 31, "Male", "Product Development", 2012, 35700.0));
        return employeeList;

    }
}
class Employee {
    int id;

    String name;

    int age;

    String gender;

    String department;

    int yearOfJoining;

    double salary;

    public Employee(int id, String name, int age, String gender, String department, int yearOfJoining, double salary) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.department = department;
        this.yearOfJoining = yearOfJoining;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }

    public String getDepartment() {
        return department;
    }

    public int getYearOfJoining() {
        return yearOfJoining;
    }

    public double getSalary() {
        return salary;
    }

    @Override
    public String toString() {
        return "Id : " + id + ", Name : " + name + ", age : " + age + ", Gender : " + gender + ", Department : "
                + department + ", Year Of Joining : " + yearOfJoining + ", Salary : " + salary;
    }

    static class EmployeeInfo{
        String employee_name;
        int employee_age;

        public EmployeeInfo(String employee_name, int employee_age) {
            this.employee_name = employee_name;
            this.employee_age = employee_age;
        }

        @Override
        public String toString() {
            return "EmployeeInfo{" +
                    "employee_name='" + employee_name + '\'' +
                    ", employee_age=" + employee_age +
                    '}';
        }
    }
}
